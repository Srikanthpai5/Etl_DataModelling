'''
etl_scripts.py use all the functions used in etl_job.py
'''
# imports
import pandas as pd
from zipfile import ZipFile
from sqlalchemy import inspect, create_engine

# function to extract the zip file, in path

def extract_zip(zip_name, extract_path):
    '''
    opens file in read mode, extracts all file to extract_path
    '''
    with ZipFile(zip_name, 'r') as zip:
        print('Extracting all files now..\n')
        zip.extractall(extract_path)
        count_zip = len(zip.infolist())
        print('total zip extracted', count_zip)
    return


# establish connection to mysql via sqlalchemy

def establish_connection(user, password, host, database):
    path = 'mysql+pymysql://' + user + ':' + password + '@' + host + '/' + database
    engine = create_engine(path)
    print('Connection established with ', engine)

    return engine

# extract column names from MYSql table

def sql_table_column(table, engine_name):
    col_names = []
    for col in inspect(engine_name).get_columns(table):
        col_names.append(col['name'])

    # col_names = [col['name'] for col in inspect(engine_name).get_columns(table)]
    return col_names

# transform table to required state using pandas

def transform_table(table_name , file_path, engine_name):
    ''' Returns a dataframe object'''
    cols = sql_table_column(table_name, engine_name)
    path = file_path+table_name+'.csv'
    print('file path is ', path)
    
    # to read table
    #data = pd.read_table(path, sep='|', names=cols, index_col=False)
    
    # to read csv
    data = pd.read_csv(path, sep=',', names=cols, index_col=False)
    data = data.dropna(how='all', axis='columns')
    print(data.head())
    print('Table %s is tranformed' % (table_name))
    return data

# insert the data [dateframe generated by transform_table] into MySQL DB

def insert_data_sql(data, sql_tablename, engine):

    print('data is being inserted into ',sql_tablename)
    try:
        with engine.connect() as conn, conn.begin():
            data.to_sql(sql_tablename, conn, if_exists='append',
                        index=False, index_label=True)
    except Exception as e:
        print('Data could not be inserted for table ' + e)
    print('Data is inserted for table ', sql_tablename)
    return
